<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functional on CastOff</title>
    <link>https://christophe1997.github.io/tags/functional/</link>
    <description>Recent content in Functional on CastOff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy;Christophe</copyright>
    <lastBuildDate>Wed, 06 May 2020 20:06:38 +0800</lastBuildDate><atom:link href="https://christophe1997.github.io/tags/functional/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Surpasser Count</title>
      <link>https://christophe1997.github.io/posts/surpasser-count/</link>
      <pubDate>Wed, 06 May 2020 20:06:38 +0800</pubDate>
      
      <guid>https://christophe1997.github.io/posts/surpasser-count/</guid>
      <description>Pearl 2: 给定一个长度大于1的列表, 计算其元素的最大surpasser count, 要求算法复杂度$O(n log n)$. Type: msc: Ord a =&amp;gt; [a] -&amp;gt; Int &amp;ldquo;Pearls of functional algorithm design&amp;quot;</description>
    </item>
    
    <item>
      <title>The Smallest Free Number</title>
      <link>https://christophe1997.github.io/posts/the-smallest-free-number/</link>
      <pubDate>Tue, 05 May 2020 21:01:11 +0800</pubDate>
      
      <guid>https://christophe1997.github.io/posts/the-smallest-free-number/</guid>
      <description>Pearl 1: 给定一个自然数的有限集X, 计算不属于X的最小自然数. X表示为不包含重复元素的无序列表. 时间复杂度要求$O(n)$. Type: minfree :: [Int] -&amp;gt; Int(也可</description>
    </item>
    
    <item>
      <title>Continuation Passing Style and Tail Recursion</title>
      <link>https://christophe1997.github.io/posts/cps/</link>
      <pubDate>Sat, 29 Feb 2020 21:40:07 +0800</pubDate>
      
      <guid>https://christophe1997.github.io/posts/cps/</guid>
      <description>之前在&amp;quot;Essentials of Programming Languages&amp;quot;中学习过CPS(Continuation Passing Style), 而笔记在blog改版后被</description>
    </item>
    
    <item>
      <title>Zipper</title>
      <link>https://christophe1997.github.io/posts/zipper/</link>
      <pubDate>Thu, 27 Feb 2020 21:17:41 +0800</pubDate>
      
      <guid>https://christophe1997.github.io/posts/zipper/</guid>
      <description>近来想于函数式编程中寻找类似与双向链表的数据结构, 结果找到了Zipper. Zipper中文为拉链, 泛指一类常在函数式编程中使用的聚合数据结构</description>
    </item>
    
    <item>
      <title>Functional Data Structure 2</title>
      <link>https://christophe1997.github.io/posts/functional-data-structure-2/</link>
      <pubDate>Tue, 24 Jul 2018 15:54:24 +0000</pubDate>
      
      <guid>https://christophe1997.github.io/posts/functional-data-structure-2/</guid>
      <description>Amortization Implementations with good amortized bounds are often simpler and faster than implementations with comparable worst-case bounds. Given a sequence of operations, we may wish to know the running time of the entire sequence, but not care about the running time of any individual operation.
For instance, given a sequence of n operations, we may wish to bound the total running time of the sequence by O(n) without insisting than every individual operation run in O(1) time.</description>
    </item>
    
    <item>
      <title>Functional Data Structure 1</title>
      <link>https://christophe1997.github.io/posts/functional-data-structure-1/</link>
      <pubDate>Thu, 19 Jul 2018 17:00:11 +0000</pubDate>
      
      <guid>https://christophe1997.github.io/posts/functional-data-structure-1/</guid>
      <description>Introduction To implement data structure in a functional way, there are two basic problems. First, from the point of view of designing and implementing efficient data structures, functional programming&amp;rsquo;s stricture against destructive updates(i.e. assignments) is a staggering handicap, tantamount to confiscating a master chef&amp;rsquo;s knives.
Imperative data structures often rely on assignments in crucial ways, and so different solutions must be found for functional programs. The second difficulty is that functional data strcutures are expected to be more flexible than their imperative counterparts.</description>
    </item>
    
  </channel>
</rss>
