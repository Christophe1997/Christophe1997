<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pearls on CastOff</title>
    <link>https://christophe1997.github.io/tags/pearls/</link>
    <description>Recent content in Pearls on CastOff</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 06 May 2020 20:06:38 +0800</lastBuildDate><atom:link href="https://christophe1997.github.io/tags/pearls/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Surpasser Count</title>
      <link>https://christophe1997.github.io/posts/surpasser-count/</link>
      <pubDate>Wed, 06 May 2020 20:06:38 +0800</pubDate>
      
      <guid>https://christophe1997.github.io/posts/surpasser-count/</guid>
      <description>Pearl 2: 给定一个长度大于1的列表, 计算其元素的最大surpasser count, 要求算法复杂度$O(n log n)$. Type: msc: Ord a =&amp;gt; [a] -&amp;gt; Int
&amp;ldquo;Pearls of functional algorithm design&amp;quot;的第二章, 我们先来看surpasser的定义
Definition surpasser: 称列表中$X[j]$是$X[i]$的surpasser, 如果$X[i] &amp;lt; X[j]$且$i &amp;lt; j$.
因此一个元素的surpasser count就是其surpasser的数目.
同样, 一个naive的实现很容易:
msc :: Ord a =&amp;gt; [a] -&amp;gt; Int msc xs = maximum [scount z zs | z:zs &amp;lt;- tails xs] scount :: Ord a =&amp;gt; a -&amp;gt; [a] -&amp;gt; Int scount x xs = length $ filter (&amp;gt; x) xs 同时也很容易看到, 这个实现的时间复杂度是$O(n^2)$, 不符合要求的$O(n log n)$.</description>
    </item>
    
    <item>
      <title>The Smallest Free Number</title>
      <link>https://christophe1997.github.io/posts/the-smallest-free-number/</link>
      <pubDate>Tue, 05 May 2020 21:01:11 +0800</pubDate>
      
      <guid>https://christophe1997.github.io/posts/the-smallest-free-number/</guid>
      <description>Pearl 1: 给定一个自然数的有限集X, 计算不属于X的最小自然数. X表示为不包含重复元素的无序列表. 时间复杂度要求$O(n)$.
Type: minfree :: [Int] -&amp;gt; Int(也可以额外的定义自然数类型, 不过这不是我们的重点)
&amp;ldquo;Pearls of Functional Algorithm Design&amp;quot;的第一章, 其描述了一个分治的算法和一个基于array的算法, 这里按个人的思路讲解一下基于分治的算法, 基于array的算法具体可以查阅原文. 首先拿到这个问题, 我觉得最直接的想法就是
Base Solution: minfree xs = head $ [0..] \\ xs 
然而这和要求的线性时间复杂度不符. 第二个想法就是设计一个fold的函数遍历一遍列表, 这样时间复杂度符合要求. 但是越来越多的边界条件让我意识到思路不对. 看了原文才发现忽略了解题的一个重要条件.
Fact: [0..n]中的所有自然数不可能都在X(xs)中, 其中n = length xs.
这也很容易证明, 因为$ n + 1 = length\ [0..n] &amp;gt; n $, 因此不属于集合X的最小自然数就是[0..n]中不属于X的最小自然数. 至此,该问题很容易解决, 只需要一个marked的array来表示[0,,n]中的自然数是否在X中即可. 下面描述基于分治的算法, 首先给出一个基本的结论.
Theorem: (as ++ bs) \\ (us ++ vs) == (as \\ us) ++ (bs \\ vs), 如果as \\ vs == as &amp;amp;&amp;amp; bs \\ us == bs.</description>
    </item>
    
  </channel>
</rss>
