<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on CastOff</title>
    <link>https://christophe1997.github.io/categories/algorithm/</link>
    <description>Recent content in Algorithm on CastOff</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 06 May 2020 20:06:38 +0800</lastBuildDate><atom:link href="https://christophe1997.github.io/categories/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Surpasser Count</title>
      <link>https://christophe1997.github.io/posts/surpasser-count/</link>
      <pubDate>Wed, 06 May 2020 20:06:38 +0800</pubDate>
      
      <guid>https://christophe1997.github.io/posts/surpasser-count/</guid>
      <description>Pearl 2: 给定一个长度大于1的列表, 计算其元素的最大surpasser count, 要求算法复杂度$O(n log n)$. Type: msc: Ord a =&amp;gt; [a] -&amp;gt; Int
&amp;ldquo;Pearls of functional algorithm design&amp;quot;的第二章, 我们先来看surpasser的定义
Definition surpasser: 称列表中$X[j]$是$X[i]$的surpasser, 如果$X[i] &amp;lt; X[j]$且$i &amp;lt; j$.
因此一个元素的surpasser count就是其surpasser的数目.
同样, 一个naive的实现很容易:
msc :: Ord a =&amp;gt; [a] -&amp;gt; Int msc xs = maximum [scount z zs | z:zs &amp;lt;- tails xs] scount :: Ord a =&amp;gt; a -&amp;gt; [a] -&amp;gt; Int scount x xs = length $ filter (&amp;gt; x) xs 同时也很容易看到, 这个实现的时间复杂度是$O(n^2)$, 不符合要求的$O(n log n)$.</description>
    </item>
    
    <item>
      <title>The Smallest Free Number</title>
      <link>https://christophe1997.github.io/posts/the-smallest-free-number/</link>
      <pubDate>Tue, 05 May 2020 21:01:11 +0800</pubDate>
      
      <guid>https://christophe1997.github.io/posts/the-smallest-free-number/</guid>
      <description>Pearl 1: 给定一个自然数的有限集X, 计算不属于X的最小自然数. X表示为不包含重复元素的无序列表. 时间复杂度要求$O(n)$.
Type: minfree :: [Int] -&amp;gt; Int(也可以额外的定义自然数类型, 不过这不是我们的重点)
&amp;ldquo;Pearls of Functional Algorithm Design&amp;quot;的第一章, 其描述了一个分治的算法和一个基于array的算法, 这里按个人的思路讲解一下基于分治的算法, 基于array的算法具体可以查阅原文. 首先拿到这个问题, 我觉得最直接的想法就是
Base Solution: minfree xs = head $ [0..] \\ xs 
然而这和要求的线性时间复杂度不符. 第二个想法就是设计一个fold的函数遍历一遍列表, 这样时间复杂度符合要求. 但是越来越多的边界条件让我意识到思路不对. 看了原文才发现忽略了解题的一个重要条件.
Fact: [0..n]中的所有自然数不可能都在X(xs)中, 其中n = length xs.
这也很容易证明, 因为$ n + 1 = length\ [0..n] &amp;gt; n $, 因此不属于集合X的最小自然数就是[0..n]中不属于X的最小自然数. 至此,该问题很容易解决, 只需要一个marked的array来表示[0,,n]中的自然数是否在X中即可. 下面描述基于分治的算法, 首先给出一个基本的结论.
Theorem: (as ++ bs) \\ (us ++ vs) == (as \\ us) ++ (bs \\ vs), 如果as \\ vs == as &amp;amp;&amp;amp; bs \\ us == bs.</description>
    </item>
    
    <item>
      <title>字符串处理算法</title>
      <link>https://christophe1997.github.io/posts/string-algorithms/</link>
      <pubDate>Mon, 07 May 2018 21:18:59 +0000</pubDate>
      
      <guid>https://christophe1997.github.io/posts/string-algorithms/</guid>
      <description>字符串处理算法具有很高的重要性以及应用领域的多样性. 以下讨论默认的是扩展的ASCII字符集(R=256).
字符串排序算法 对于许多排序应用而言, 决定顺序的键都是字符串. 利用字符串的特殊性质来将其排序通常能够获得更高的效率.
键索引计数法 我们首先介绍一种适用于小整数键的简单排序算法.
public class KeyIndexedCount { public static void sort(char[] chr, int R) { int[] count = new int[R + 1]; char[] temp = new char[chr.length]; for (char aChr : chr) { count[aChr + 1]++; } for (int i = 0; i &amp;lt; R; i++) { count[i + 1] += count[i]; } for (char aChr : chr) { temp[count[aChr]] = aChr; count[aChr]++; } System.arraycopy(temp, 0, chr, 0, chr.</description>
    </item>
    
    <item>
      <title>图算法</title>
      <link>https://christophe1997.github.io/posts/graph-algorithms/</link>
      <pubDate>Fri, 20 Apr 2018 19:21:30 +0000</pubDate>
      
      <guid>https://christophe1997.github.io/posts/graph-algorithms/</guid>
      <description>采用哪种数据结构来表示图, 主要考虑以下两个方面:
 必须为可能在应用中碰到的各种类型的图预留出足够的空间, 以及 Graph的实例方法一定要高效.  常见的表示方法有以下几种:
 邻接矩阵, 对于有N个顶点的图而言, 邻接矩阵需要$ N^2 $的空间. 边的数组, 通过定义边来定义图, 这种方法在寻找相邻的点时需要遍历整个数组. 邻接表数组, 使用一个顶点为索引的列表数组, 其中每个元素都是和该顶点相邻的顶点列表. 这种结构能够满足上述的两个条件.  常见实现的性能比较(V表示结点数, E表示边数):
   数据结构 所需空间 添加边 检查顶点是否相邻 遍历所有相邻顶点     边的列表 E 1 E E   邻接矩阵 $ V^2 $ 1 1 V   邻接表 E+V 1 degree(V) degree(V)    非稠密图的标准表示是邻接表, 这种表示具有以下特性:
 使用的空间和V+E成正比, 添加一条边所需要的时间为常数, 以及 遍历顶点v的所有相邻顶点所需要的时间和v的度数成正比.  无向图 无向图只定义了顶点以及顶点之间的关系.</description>
    </item>
    
    <item>
      <title>查找算法</title>
      <link>https://christophe1997.github.io/posts/search-algorithms/</link>
      <pubDate>Thu, 05 Apr 2018 15:21:41 +0000</pubDate>
      
      <guid>https://christophe1997.github.io/posts/search-algorithms/</guid>
      <description>符号表是一种存储键值对的数据结构, 支持插入和查找操作. 要确定一个给定的键是否存在于符号表中, 首先要建立对象等价性的概念. 为了保证一致性, 最好选择不 可变的数据类型作为键. 成本模型: 统计比较的次数, 在内循环不进行比较的情况下, 转为统计数组的访问次数.
二叉查找树 每个结点的键都大于其左子树的任意结点的键而小于右子树的任一结点的键. 一棵二叉查找树代表了一组键(及其相应的值)的集合, 同一个集合可以用多棵不同的二叉树 表示, 如果将所有键都投影到一条直线上, 则可以保证得到一个有序的键列.
查找的惯用做法是: 如果含有该键的结点存在于表中, 则返回相应的值或者返回null. 我们将采用Java 8的Optional类型使得查找的结果总是返回Optional, 将 显示的调用交给使用者.
使用二叉查找树的算法的运行时间取决于树的形状. 在最好的情况下, 一棵含有N个结点的树是完全平衡的, 每条空链接和根结点的距离都为~lgN; 而在最坏的情况下 树的高度为N. 当键的分布是随机的情况下, 二叉查找树一般具有较好的平衡性, 此时查找或者插入操作平均所需的次数为~2lnN(1.39lgN). 虽然二叉查找树的查找 成本比二分查找高约39%, 但插入操作是对数级别的.
public class BST&amp;lt;Key extends Comparable&amp;lt;Key&amp;gt;, Value&amp;gt; { private Node root; private class Node { private Node left, right; private Key key; private Value val; private int N; Node(Key key, Value val, int N) { this.</description>
    </item>
    
    <item>
      <title>优先队列</title>
      <link>https://christophe1997.github.io/posts/priority-queue/</link>
      <pubDate>Wed, 04 Apr 2018 16:18:50 +0000</pubDate>
      
      <guid>https://christophe1997.github.io/posts/priority-queue/</guid>
      <description>优先队列 当一颗二叉树的每个节点都大于等于它的两个子结点时, 它被称为堆有序, 于是从任一结点向上都能够得到一列非递减的元素. 二叉堆(以下简称堆)是一组能够用堆有序 的完全二叉树排序的元素, 并在数组中按照层级存储. 在一个堆中, 位置k的节点的父结点的位置为$ \lfloor k/2 \rfloor $, 而它的两个子节点的位置是2k和 2k+1.
对于一个含有N个元素的堆, 插入元素操作只需不超过lgN+1次比较, 删除最大元素的操作不超过2lgN次比较.
public class MaxPQ&amp;lt;Key extends Comparable&amp;lt;Key&amp;gt;&amp;gt; { private Key[] pq; private int N = 0; @SuppressWarnings(&amp;#34;unchecked&amp;#34;) private Key[] cast(Object obj) { return (Key[]) obj; } private boolean less(int i, int j) { return pq[i].compareTo(pq[j]) &amp;lt; 0; } private void exch(int i, int j) { Key t = pq[i]; pq[i] = pq[j]; pq[j] = t; } private void swim(int k) { while (k &amp;gt; 1 &amp;amp;&amp;amp; less(k / 2, k)) { exch(k, k / 2); k = k / 2; } } private void sink(int k) { while (2 * k &amp;lt;= N) { int j = 2 * k; if (j &amp;lt; N &amp;amp;&amp;amp; less(j, j + 1)) j++; if (!</description>
    </item>
    
    <item>
      <title>排序算法</title>
      <link>https://christophe1997.github.io/posts/sorting-algorithms/</link>
      <pubDate>Fri, 30 Mar 2018 12:07:09 +0000</pubDate>
      
      <guid>https://christophe1997.github.io/posts/sorting-algorithms/</guid>
      <description>排序算法的目标就是将所有元素的主键按照某种方式排列. 成本模型: 计算比较和交换的次数, 对于不交换元素的算法, 计算访问数组的次数. 排序算法的额外内存开销 和运行时间是同等重要的, 排序算法可以分为原地排序算法以及需要额外内存空间来存储另一份数组副本的其他排序算法.
我们使用的算法模板如下
public interface Sort { static void sort(Comparable[] a) { } static boolean less(Comparable v, Comparable w) { return v.compareTo(w) &amp;lt; 0; } static void exch(Comparable[] a, int i, int j) { Comparable t = a[i]; a[i] = a[j]; a[j] = t; } static void show(Comparable[] a) { for (Comparable x : a) { StdOut.print(x + &amp;#34; &amp;#34;); StdOut.println(); } } static boolean isSorted(Comparable[] a) { for (int i = 1; i &amp;lt; a.</description>
    </item>
    
    <item>
      <title>union-find算法</title>
      <link>https://christophe1997.github.io/posts/union-find-algorithm/</link>
      <pubDate>Wed, 14 Mar 2018 22:54:16 +0000</pubDate>
      
      <guid>https://christophe1997.github.io/posts/union-find-algorithm/</guid>
      <description>union-find算法是一个解决动态连通性的经典算法, 具有广泛性的应用. 简单起见, 我们将对象称为触点, 将整数对称为连接, 将等价类称为连通分量, 并用0 到N-1的整数来表示N个触点.
API public class UF { UF(int N) // 以整数标识初始化N个触点  void union(int p, int q) // 在p和q之间添加一条连接  int find(int p) //p所在分量的标识符  boolean connected(int p, int q) // p和q之间是否存在于同一个分量中  int count() // 连通分量的数量 } 成本模型: 以数组的访问次数作为成本模型, 无论读写.
算法的关键在于find和union的设计上.
quick-find算法 //quick-find算法 public int find(int p) { return id[p]; } public void union(int p, int q) { int pID = find(p), qID = find(q); // 两次读操作  if (pID !</description>
    </item>
    
  </channel>
</rss>
