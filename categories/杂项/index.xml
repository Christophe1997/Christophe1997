<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杂项 on CastOff</title>
    <link>https://christophe1997.github.io/categories/%E6%9D%82%E9%A1%B9/</link>
    <description>Recent content in 杂项 on CastOff</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 05 Dec 2019 20:29:00 +0800</lastBuildDate><atom:link href="https://christophe1997.github.io/categories/%E6%9D%82%E9%A1%B9/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用hugo生成博客</title>
      <link>https://christophe1997.github.io/posts/%E4%BD%BF%E7%94%A8hugo%E7%94%9F%E6%88%90%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 05 Dec 2019 20:29:00 +0800</pubDate>
      
      <guid>https://christophe1997.github.io/posts/%E4%BD%BF%E7%94%A8hugo%E7%94%9F%E6%88%90%E5%8D%9A%E5%AE%A2/</guid>
      <description>之前一直有使用Hexo来生成静态博客，如今将博客迁移到了Hugo下。两种工具总体而言各有优势，个人此次转移到hugo的主要原因大概是希望能够重拾写博客的习惯，本文主要介绍了使用Hugo的大致流程。首先给出个人博客的文件结构：
Root # blog根目录 | +-- archetypes +-- content |-- posts # 博客目录 |-- _index.md # 主页 +-- data +-- layouts +-- ox-hugo # org文件位置 |-- messy.org # category为杂项的org文件 +-- public # submodule +-- resource +-- static +-- themes |-- xxx # 主题文件夹, submodule +-- .git +-- config.toml +-- .dir-locals.el # 自动将org文件转为markdown配置文件 +-- .gitmodules 其中只有 ox-hugo 为自定义文件夹, .dir-locals 为ox-hugo自动转换的配置文件，其他都是自动生成的。接下来个人就hugo生成博客关键部分展开介绍下。
主题的选择 首先搭建博客面对的问题就是主题，如果你非常擅长网页设计可以自己DIY一款主题。大多数还是会选择已有的主题，我们在选择主题时，除了最重要的UI外，还应当考虑以下的因素：
 是否支持写作的基本功能，如公式的显示（通常是MathJax）； 是否支持博客网站的基本功能，如分类，标签，分享，评论等。  尤其是评论这块，个人之前用的disqus, 但好像在国内的访问存在一些问题，目前比较推荐的方案是使用git issues来实现评论功能，如gitment。像我这样的懒人当然是选择不支持评论功能啦：）
博客的托管 比较推荐的方案是将整个blog作为一个git项目，并且将 public 和 themes/xxx 作为该项目的submodule。其中 public 对应于你的要作为Github pages的 git项目地址，通常建议是 &amp;lt;username&amp;gt;.</description>
    </item>
    
    <item>
      <title>杂记</title>
      <link>https://christophe1997.github.io/posts/%E6%9D%82%E8%AE%B0/</link>
      <pubDate>Mon, 04 Mar 2019 17:12:00 +0000</pubDate>
      
      <guid>https://christophe1997.github.io/posts/%E6%9D%82%E8%AE%B0/</guid>
      <description>多态(polymorphic)最早从19世纪希腊语中引入, 其中poly代表很多(many), morph代表形式(form), 而-ic的后缀表示由&amp;hellip;制成(made of). 因此, 多态意味着&amp;quot;made of many form&amp;quot;, 即有许多形式构成. 因此单态(monomorphic)很容易猜到是&amp;quot;made of one form&amp;quot;. 2019.03.04
  -ary的后缀表示属于或关于(of or pertaining to), 在讨论数学上的元数(arity)时, -ary是公共的后缀, 诸如nullary(零元), unary(一元), binary(二元)等. 2019.03.07
  我发现gnome-terminal下C-;会映射成;,导致我在terminal的emacs中使用快捷键C-x C-;注释行失败.
网上查阅后发现, 由于gnome-terminal没有C-;的转义序列(escape sequence), 而默认的将其识别为;. 2019.04.13
  紧接3, 我发现在gnome-terminal下emacs无法使用C-;, 又懒的配置term. 于是就重新编译了带有GUI的emacs(./configure --with-gnutls=no --without-pop --with-x), 之后发现其默认会使用Anacnoda的lib, 一开始会报一些libxml2.so: undefined reference to `ucnv_close_58&#39;, 之后我将LD_LIBRARY_PATH设置为~/anaconda3/lib之后, 上述错误没有了, 但又报了新的错误libSM.so: undefined reference to `uuid_unparse_lower@UUID_1.0&#39;. 解决方法是不使用Anaconda的lib, 而使用系统的lib(export不包含~/anaconda/bin的PATH, 随后重新configure和make), 具体原因未查明. 2019.04.13
  i3-wm的layout-restore的问题. i3-save-tree生成的json文件无法直接使用, 需要手工修改layout文件, 首先需要包含一个顶层的container, 随后每一个swallows都需要声明class和instance, i3-save-tree会生成class和instance信息, 当然也可以通过xprop获取.</description>
    </item>
    
    <item>
      <title>一些Ubuntu安装问题</title>
      <link>https://christophe1997.github.io/posts/some-ubuntu-install-problem/</link>
      <pubDate>Sat, 28 Apr 2018 21:11:36 +0000</pubDate>
      
      <guid>https://christophe1997.github.io/posts/some-ubuntu-install-problem/</guid>
      <description>One day ago, I started upgrading my Ubuntu 16.04 to 18.04, after I see the update from website. The most diffrience betwen 16.04 and 18.04 is that the 18.04 use GNOME desktop rather than Unity. I had heard that the GNOME desktop is better than Unity, so I tried 18.04 for the new desktop. Unfortunately, after I upgraded my OS, I found that the GNOME desktop wasjust so uncomfortable. And after one hour I gone back to 16.</description>
    </item>
    
    <item>
      <title>Git Cheat Sheet</title>
      <link>https://christophe1997.github.io/posts/git-cheat-sheet/</link>
      <pubDate>Sun, 11 Mar 2018 13:07:40 +0000</pubDate>
      
      <guid>https://christophe1997.github.io/posts/git-cheat-sheet/</guid>
      <description>本地操作 状态检览 $ git status -s XY PATH1 -&amp;gt; PATH2 PATH2只有在PATH1关联到不同的路径时才会显示(例如, 文件重命名).
XY是两个状态码, 在合并冲突的时候, X和Y分别表示合并双方的修改状态; 而在一般情况下X表示暂存区域(index)的状态, Y表示工作目录的状态(work tree):
 &#39; &#39; = unmodified M = modified A = added D = deleted R = renamed C = copied U = updated but unmerged  未被追踪(untracked)的文件, XY = ??; 默认不显示忽略的文件(ignored), 除非使用--ignore选项, 此时XY = !!.
查看已暂存和未暂存的修改 $ git diff 用来比较工作目录中当前文件和暂存区域快照之间的差异, 使用--staged选项查看已经暂存的将要添加到下次修改的内容
提交更新 $ git commit 这种方式会启动shell的环境变量$EDDITOR所指定的软件, 一般是VIM或emacs, 或者使用git	config	--global	core.editor来指定编辑器, 使用-v选项将diff的内容追加到编辑器中, 使用-m &#39;${comment}&#39;选项来直接添加提交信息, 而不打开编辑器.</description>
    </item>
    
  </channel>
</rss>
